{"version":3,"file":"index.125c8306.js","sources":["../../vite/modulepreload-polyfill","../../src/components/TopNav/TopNav.jsx","../../src/components/InfoBox/InfoBox.jsx","../../src/components/Spinner.jsx","../../src/api/APIUtils.js","../../src/api/MyAccountAPI.js","../../src/components/Profile/ProfileSection.jsx","../../src/components/LinkButton/LinkButton.jsx","../../src/TransactionContext.js","../../src/components/AddAttributeButton.jsx","../../src/components/RemoveAttributeButton.jsx","../../src/util.js","../../src/components/Profile/IdentifiersSection.jsx","../../src/components/Profile/Profile.jsx","../../src/components/HomePage/HomePage.jsx","../../src/components/ErrorPage.jsx","../../src/components/CanceledPage.jsx","../../src/components/TerminalPage.jsx","../../src/formTransformer.js","../../src/components/GeneralForm.jsx","../../src/components/IdpForm.jsx","../../src/components/FlowPage/FlowPage.jsx","../../src/components/LoginCallback.jsx","../../src/config.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import React from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Link, Box, Button, Text, Icon } from '@okta/odyssey-react';\n\nimport classes from './TopNav.module.css';\n\nconst TopNav = () => {\n  const { oktaAuth, authState } = useOktaAuth();\n\n  const handleLogoutOut = async () => {\n    await oktaAuth.signOut();\n  };\n\n  return (\n    <Box \n      className={classes.container}\n      display=\"flex\" \n      width=\"full\" \n      backgroundColor=\"disabled\" \n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Box padding=\"m\">\n        <Text as=\"strong\">Okta Sample</Text>\n      </Box>\n      <Box display=\"flex\" alignItems=\"center\" padding=\"m\">\n        <Box marginLeft=\"s\">\n          <Link>Docs <Icon name=\"external-link\" /></Link>\n        </Box>\n        { authState?.isAuthenticated && (\n          <Box marginLeft=\"s\">\n            <Button \n              variant=\"secondary\" \n              onClick={handleLogoutOut}\n            >\n              Sign Out\n            </Button>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default TopNav;\n","import { Box, Heading, Icon } from '@okta/odyssey-react';\n\nimport classes from './InfoBox.module.css';\n\nconst InfoBox = ({ heading, icon, renderInfo, ...rest }) => {\n  \n  return (\n    <Box \n      className={classes.container}\n      display=\"flex\" \n      paddings=\"s\" \n      flexDirection=\"column\"\n      borderRadius=\"base\"\n      padding=\"m\"\n      {...rest}\n    >\n      <Heading level=\"1\"><Icon name={icon} />{heading}</Heading>\n      <Box className={classes.infoContainer}>\n        { renderInfo() }\n      </Box>\n    </Box>\n  );\n};\n\nexport default InfoBox;\n","import { Box, CircularLoadIndicator } from '@okta/odyssey-react';\n\nconst Spinner = () => (\n  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n    <CircularLoadIndicator aria-label=\"Loader\" aria-valuetext=\"Loading...\" />\n  </Box>\n);\n\nexport default Spinner;\n","export const getUrl = (oktaAuth, url) => \n  // `${oktaAuth.options.issuer}${url}`;\n  // current myaccount endpoints have cors issue for browser request\n  // use proxy before fix is released in prod\n  `/myaccount${url}` \n","import { generateState } from '@okta/okta-auth-js';\nimport { getUrl } from './APIUtils';\n\nconst makeRequest = async (oktaAuth, options) => {\n  const replaceLinksWithFns = (item) => {\n    const newItem = Object.entries(item._links)\n      .reduce((acc, [ key, value ]) => {\n        if (key === 'self' && value.hints) {\n          value.hints.allow.forEach(method => {\n            acc[method.toLowerCase()] = async (options) => {\n              return makeRequest(oktaAuth, {\n                url: value.href.replace(oktaAuth.options.issuer, '/myaccount'),\n                // url: value.href,\n                method,\n                ...options\n              });\n            };\n          });\n        } else {\n          acc[key] = async (options) => {\n            return makeRequest(oktaAuth, {\n              url: value.href.replace(oktaAuth.options.issuer, '/myaccount'),\n              // url: value.href,\n              method: value.hints.allow[0],\n              ...options\n            });\n          };\n        }\n        return acc;\n      }, item);\n    delete newItem._links;\n    return newItem;\n  };\n  \n  const { url, method, data } = options;\n  return oktaAuth.invokeApiMethod({\n    headers: { 'Accept': '*/*;okta-version=1.0.0' },\n    url,\n    method,\n    args: data\n  }).then(res => {\n    let newRes;\n    if (Array.isArray(res)) {\n      newRes = res.map(item => replaceLinksWithFns(item));\n      newRes.headers = res.headers;\n    } else if(res) {\n      res = replaceLinksWithFns(res);\n    }\n    return res;\n  });\n};\n\nexport const getProfile = async (oktaAuth) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/profile'),\n    method: 'GET'\n  });\n};\n\nexport const updateProfile = async (oktaAuth, profile) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/profile'),\n    method: 'PUT',\n    data: { profile }\n  });\n};\n\nexport const getEmails = async (oktaAuth) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/emails'),\n    method: 'GET'\n  });\n};\n\nexport const addEmail = async (oktaAuth, payload) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/emails'),\n    method: 'POST',\n    data: {\n      state: generateState(),\n      ...payload\n    }\n  });\n};\n\nexport const updatePrimaryEmail = async (oktaAuth, emailId) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, `/idp/myaccount/emails/${emailId}/promote`),\n    method: 'POST'\n  });\n};\n\nexport const deleteEmail = async (oktaAuth, emailId) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, `/idp/myaccount/emails/${emailId}`),\n    method: 'DELETE'\n  });\n};\n\nexport const getPhones = async (oktaAuth) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/phones'),\n    method: 'GET'\n  });\n};\n\nexport const addPhone = async (oktaAuth, phoneNumber) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, '/idp/myaccount/phones'),\n    method: 'POST',\n    data: {\n      profile: {\n        phoneNumber\n      },\n      sendCode: true,\n      method: 'SMS'\n    }\n  });\n};\n\nexport const deletePhone = async (oktaAuth, phoneId) => {\n  return makeRequest(oktaAuth, {\n    url: getUrl(oktaAuth, `/idp/myaccount/phones/${phoneId}`),\n    method: 'DELETE'\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { \n  Box, \n  Heading, \n  Icon, \n  Button, \n  TextInput, \n  Infobox,\n  Text,\n} from '@okta/odyssey-react';\nimport InfoBox from '../InfoBox';\nimport Spinner from '../Spinner';\nimport { getProfile, updateProfile } from '../../api/MyAccountAPI';\n\nconst ProfileSection = () => {\n  const { oktaAuth } = useOktaAuth();\n  const [profile, setProfile] = useState(null);\n  const [inputs, setInputs] = useState([\n    { label: 'Given name', name: 'firstName', type: 'text', value: '' },\n    { label: 'Family name', name: 'lastName', type: 'text', value: '' },\n    { label: 'Age', name: 'age', type: 'number', value: '' }\n  ]);\n  const [editing, setEditing] = useState(false);\n  const [updated, setUpdated] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (editing) {\n      return;\n    }\n    getProfile(oktaAuth).then(({ profile }) => {\n      setProfile(profile);\n    }).catch((err) => {\n      console.error(err);\n      setError(err);\n    });\n  }, [oktaAuth, error, editing]);\n\n  const handleEditNames = () => {\n    const newInputs = inputs.map(input => ({ ...input, value: profile[input.name] }));\n    setInputs(newInputs);\n    setEditing(true);\n    setUpdated(false);\n    setError(null);\n  };\n\n  const handleCancelEditNames = () => {\n    const newInputs = inputs.map(input => ({ ...input, value: '' }));\n    setInputs(newInputs);\n    setEditing(false);\n  };\n\n  const handleUpdateProfiles = async () => {\n    const updatedProfile = inputs.reduce((acc, curr) => {\n      if (curr.type === 'number') {\n        const castedNumber = Number(curr.value);\n        if (Number.isNaN(castedNumber)) {\n          // assign invalid value for server side validation\n          acc[curr.name] = curr.value;    \n        } else {\n          acc[curr.name] = castedNumber  \n        }\n      } else {\n        acc[curr.name] = curr.value;\n      }\n      return acc;\n    }, profile);\n    try {\n      const newProfile = await updateProfile(oktaAuth, updatedProfile);\n      setProfile(newProfile.profile);\n      setUpdated(true);\n    } catch (err) {\n      console.log(err);\n      setError(err);\n    }\n    \n    handleCancelEditNames();\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    const newInputs = inputs.map(input => {\n      if (input.name === name) {\n        input.value = value;\n      }\n      return input;\n    });\n    setInputs(newInputs);\n  };\n\n  if (!profile) {\n    return <Spinner />;\n  }\n\n  return (\n    <Box padding=\"m\">\n      <Box \n        display=\"flex\" \n        justifyContent=\"space-between\" \n        alignItems=\"center\" \n        marginTop=\"s\" \n        marginBottom=\"s\"\n      >\n        <Heading level=\"1\">\n          <Icon name=\"user\" />\n          Your Profile\n        </Heading>\n        { editing ? (\n          <Box display=\"flex\" alignItems=\"center\">\n            <Button variant=\"clear\" onClick={handleCancelEditNames}>Cancel</Button>\n            <Button name=\"saveProfile\" onClick={handleUpdateProfiles}>Save</Button>\n          </Box>\n        ) : (\n          <Button name=\"editProfile\" variant=\"secondary\" onClick={handleEditNames}>Edit</Button>\n        )}\n      </Box>\n\n      {!!(updated || error) && (\n        <Box id=\"profile-messages-container\" marginTop=\"s\" marginBottom=\"s\">\n          {updated && (\n            <Infobox \n              variant=\"success\"\n              content=\"The profile was updated successfully\" />\n          )}\n          {!!error && error.errorCauses.map(cause => (\n            <Infobox \n              key={cause.errorSummary}\n              variant=\"danger\"\n              content={cause.errorSummary} />\n          ))}\n        </Box>\n      )}\n\n      <Box display=\"flex\" className=\"pure-g\">\n        <Box className=\"pure-u-1 pure-u-sm-1-2\" paddingRight=\"s\">\n          {inputs.map(({ label, name, value }) => (\n            <Box key={name} paddingBottom=\"s\">\n              <TextInput \n                disabled={!editing}\n                label={label} \n                name={name} \n                value={editing ? value : profile[name]} \n                onChange={handleChange}\n              />\n            </Box>\n          ))}\n        </Box>\n        <Box className=\"pure-u-1 pure-u-sm-1-2\">\n          <InfoBox \n            id=\"profile-tip\"\n            heading=\"Tip\" \n            icon=\"information-circle-filled\" \n            renderInfo={() => (\n              <Text as=\"p\">\n                The profile attributes in this example are driven by the Profile Enrollment policy.\n              </Text>\n            )} \n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ProfileSection;\n","import { Box, Link } from '@okta/odyssey-react';\n\nimport classes from './LinkButton.module.css';\n\nconst LinkButton = (props) => {\n  return (\n    <Box className={classes.container}>\n      <Link {...props} />\n    </Box>\n  );\n};\n\nexport default LinkButton;\n","import React from 'react';\n\nexport const Transaction = React.createContext({});\nexport const useTransaction = () => React.useContext(Transaction);\n","import { useState, useEffect, useCallback } from 'react';\nimport { \n  Box, \n  Infobox,\n  Modal, \n  Form,\n  Heading,\n  TextInput,\n  Text,\n  Button\n} from '@okta/odyssey-react';\nimport LinkButton from './LinkButton';\nimport { useTransaction } from '../TransactionContext';\n\nconst AddAttributeButton = ({ \n  heading, \n  initInputLabel,\n  selectorHint,\n  autoStartTransaction,\n  onStartTransaction, \n  onFinishTransaction,\n  children\n}) => {\n  const { myAccountTransaction, setMyAccountTransaction } = useTransaction();\n  const [inputLabel, setInputLabel] = useState(initInputLabel);\n  const [inputName, setInputName] = useState(selectorHint);\n  const [headingText, setHeadingText] = useState(heading);\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleFinishTransaction = useCallback(() => {\n    setValue('');\n    setMyAccountTransaction(null);\n    setError(null);\n    setOpen(false);\n    onFinishTransaction();\n  }, [setValue, setError, setOpen, setMyAccountTransaction, onFinishTransaction]);\n\n  useEffect(() => {\n    if (myAccountTransaction?.status === 'VERIFIED') {\n      handleFinishTransaction();\n    }\n    if (myAccountTransaction?.status === 'UNVERIFIED') {\n      setHeadingText('Enter Code')\n      setInputLabel('Verification Code');\n      setInputName('verificationCode');\n    }\n  }, [myAccountTransaction, handleFinishTransaction]);\n\n  const handleButtonClick = async () => {\n    if (autoStartTransaction) {\n      try {\n        const transaction = await onStartTransaction();\n        setMyAccountTransaction(transaction);\n      } catch (err) {\n        setError(err);\n      }\n    }\n    setOpen(true);\n  };\n\n  const handleChange = (e, v) => {\n    setValue(v);\n  };\n\n  const handleCancel = async (e) => {\n    e.preventDefault();\n    handleFinishTransaction();\n  };\n\n  const handleResend = async (e) => {\n    e.preventDefault();\n    const transaction = await myAccountTransaction.challenge({ data: { method: 'SMS' } });\n    setMyAccountTransaction(transaction);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let transaction;\n    try {\n      if (!myAccountTransaction) {\n        transaction = await onStartTransaction(value);\n      } else if (myAccountTransaction.status === 'UNVERIFIED') {\n        const data = { verificationCode: value };\n        transaction = await myAccountTransaction.verify({ data });\n        // no transaction update, trigger states update here\n        handleFinishTransaction();\n      }\n      if (transaction) {\n        setMyAccountTransaction(transaction);\n      }\n      setValue('');\n      setError(null);\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  return (\n    <>\n    {open && (\n      <Modal id={`${selectorHint}-modal`} open={open} onClose={handleFinishTransaction}>\n        <Box paddingBottom=\"s\">\n          <Form onSubmit={handleSubmit}>\n            <Heading id=\"form-title\" level=\"1\" visualLevel=\"3\">\n              {headingText}\n            </Heading>\n            {!!error && (\n              <Box id={`${selectorHint}-messages-container`} paddingTop=\"m\" paddingBottom=\"m\">\n                {error && (\n                  <Infobox \n                    variant=\"danger\" \n                    content={error.errorCauses?.map(({errorSummary}) => \n                      <Text key={errorSummary}>{errorSummary}</Text>)} \n                  />)}\n              </Box>\n            )}\n            <Form.Main>\n              <TextInput \n                type=\"text\" \n                name={inputName}\n                label={inputLabel} \n                value={value} \n                onChange={handleChange} \n              />\n              {!!myAccountTransaction?.challenge && (\n                <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" padding=\"s\">\n                  <Text>Not receive the code?</Text>\n                  <Button variant=\"clear\" name=\"resend\" onClick={handleResend}>Resend</Button>\n                </Box>\n              )}\n            </Form.Main>\n            <Form.Actions>\n              <Button variant=\"clear\" name=\"cancel\" onClick={handleCancel}>Cancel</Button>\n              <Button type=\"submit\">Continue</Button> \n            </Form.Actions>\n          </Form>\n        </Box>\n      </Modal>\n    )}\n    \n    <Box>\n      <LinkButton name={selectorHint} onClick={handleButtonClick}>\n        {children}\n      </LinkButton>\n    </Box>\n    </>\n  );\n};\n\nexport default AddAttributeButton;\n","import React, { useState } from 'react';\nimport { Modal, Heading, Box, Button, Text } from '@okta/odyssey-react';\nimport LinkButton from './LinkButton';\n\nconst RemoveButton = ({ \n  selectorHint,\n  heading, \n  description,\n  onStartTransaction, \n  onFinishTransaction,\n  children\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const handleButtonClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = async () => {\n    await onStartTransaction();\n    onFinishTransaction();\n    setOpen(false);\n  };\n  \n  return (\n    <>\n    <Modal id={`${selectorHint}-modal`} open={open} onClose={handleClose}>\n      <Box display=\"flex\" flexDirection=\"column\" padding=\"m\">\n        <Heading>{heading}</Heading>\n        <Text as=\"p\">{description}</Text>\n        <Box display=\"flex\" justifyContent=\"flex-end\">\n          <Button name=\"cancel\" variant=\"clear\" onClick={handleClose}>Cancel</Button>\n          <Button name=\"remove\" variant=\"danger\" onClick={handleConfirm}>Remove</Button>\n        </Box>\n      </Box>\n    </Modal>\n    <LinkButton name={selectorHint} onClick={handleButtonClick}>{children}</LinkButton>\n    </>\n  );\n};\n\nexport default RemoveButton;\n","export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function getMessageVariant(errorClass) {\n  return {\n    'ERROR': 'danger'\n  }[errorClass];\n}\n","import { useState, useEffect } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Box, Text } from '@okta/odyssey-react';\nimport InfoBox from '../InfoBox';\nimport Spinner from '../Spinner';\nimport AddAttributeButton from '../AddAttributeButton';\nimport RemoveButton from '../RemoveAttributeButton';\nimport { \n  addEmail, \n  addPhone, \n  deleteEmail, \n  deletePhone, \n  getEmails, \n  getPhones \n} from '../../api/MyAccountAPI';\nimport { capitalizeFirstLetter } from '../../util';\n\nconst IdentifiersSection = () => {\n  const { oktaAuth } = useOktaAuth();\n  const [emails, setEmails] = useState();\n  const [phones, setPhones] = useState();\n\n  useEffect(() => {\n    const fetchEmails = async () => {\n      const emails = await getEmails(oktaAuth);\n      setEmails(emails.map(email => {\n        if (email.roles.includes('PRIMARY')) {\n          email.label = 'Primary email';\n          email.selectorId='primary-email';\n        } else {\n          email.label = 'Secondary email';\n          email.selectorId='secondary-email';\n        }\n        email.selectorId = email.label\n          .split(' ')\n          .map(str => str.toLowerCase())\n          .join('-');\n        email.selectorHint = email.label\n          .split(' ')\n          .map(capitalizeFirstLetter)\n          .join('');\n        return email;\n      }));\n    };\n    if (!emails) {\n      fetchEmails();\n    }\n  }, [oktaAuth, emails]);\n\n  useEffect(() => {\n    const fetchPhones = async () => {\n      const phones = await getPhones(oktaAuth);\n      setPhones(phones);\n    };\n    if (!phones) {\n      fetchPhones();\n    }\n  }, [oktaAuth, phones]);\n\n  const finishEmailTransaction = () => {\n    // re-fetch phones list\n    setEmails(null);\n  };\n\n  const finishPhoneTransaction = () => {\n    // re-fetch phones list\n    setPhones(null);\n  };\n\n  const startUpdateEmailTransaction = async (emailObj, email) => {\n    return addEmail(oktaAuth, {\n      profile: {\n        email: email\n      },\n      sendEmail: true,\n      role: emailObj.roles[0]\n    });\n  };\n\n  const startAddSecondaryEmailTransaction = async (email) => {\n    return addEmail(oktaAuth, {\n      profile: {\n        email\n      },\n      sendEmail: true,\n      role: 'SECONDARY'\n    });\n  };\n\n  const handleRemoveEmail = async (emailId) => {\n    await deleteEmail(oktaAuth, emailId);\n  };\n\n  const startAddPhoneTransaction = async phone => {\n    return addPhone(oktaAuth, phone);\n  };\n\n  const handleRemovePhone = async (phoneId) => {\n    await deletePhone(oktaAuth, phoneId);\n  };\n\n  const startEmailVerificationTransaction = async (email) => {\n    return email.challenge();\n  };\n\n  const startPhoneVerificationTransaction = async (phone) => {\n    await phone.challenge({ data: { method: 'SMS' } }); // no response\n    return phone;\n  };\n\n  return (\n    <Box display=\"flex\" className=\"pure-g\" padding=\"m\">\n      <Box \n        className=\"pure-u-1 pure-u-sm-1-2\" \n        paddingRight=\"s\" \n        display=\"flex\" \n        flexDirection=\"column\"\n        marginTop=\"s\" \n      >\n        {emails ? (\n          <Box>\n            {emails.map(email => (\n                <Box key={email.id} display=\"flex\" flexDirection=\"column\" paddingBottom=\"s\">\n                  <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\">\n                    <Text as=\"strong\">{email.label}</Text>\n                    {email.status === 'VERIFIED' ? (\n                      <Box marginLeft=\"s\">\n                        <AddAttributeButton \n                          heading={`Edit ${email.label}`}\n                          initInputLabel=\"Email\"\n                          selectorHint={`edit${email.selectorHint}`}\n                          onStartTransaction={startUpdateEmailTransaction.bind(null, email)} \n                          onFinishTransaction={finishEmailTransaction}\n                        >\n                          Edit\n                        </AddAttributeButton>\n                      </Box>\n                    ) : (\n                      <>\n                      <Box marginLeft=\"s\">\n                        <AddAttributeButton \n                          heading=\"Verify Email\"\n                          initInputLabel=\"Verification Code\"\n                          selectorHint={`verify${email.selectorHint}`}\n                          autoStartTransaction\n                          onStartTransaction={startEmailVerificationTransaction.bind(null, email)} \n                          onFinishTransaction={finishEmailTransaction}\n                        >\n                          Verify\n                        </AddAttributeButton>\n                      </Box>\n                      <Box marginLeft=\"s\">\n                        <RemoveButton \n                          heading=\"Are you sure you want to remove this email?\" \n                          description={email.profile.email}\n                          onStartTransaction={handleRemoveEmail.bind(null, email.id)}\n                          onFinishTransaction={finishEmailTransaction}\n                        >\n                          Remove\n                        </RemoveButton>\n                      </Box>\n                      </>\n                    )}\n                  </Box>\n                  <Box paddingTop=\"s\">\n                    <Text id={email.selectorId}>{email.profile.email}</Text>\n                  </Box>\n                </Box>\n              ))}\n            {!emails.some(email => email.roles.includes('SECONDARY')) && (\n              <AddAttributeButton \n                heading=\"Add secondary email\" \n                initInputLabel=\"Email\"\n                selectorHint=\"addSecondaryEmail\"\n                onStartTransaction={startAddSecondaryEmailTransaction} \n                onFinishTransaction={finishEmailTransaction}\n              >\n                Add Secondary Email\n              </AddAttributeButton>\n            )}\n          </Box>\n        ) : (\n          <Spinner />\n        )}\n        <Box id=\"phone-section\">\n          <Text as=\"strong\">Phone number</Text>\n          {phones ? phones.map(phone => (\n            <Box key={phone.id} display=\"flex\" alignItems=\"center\" paddingTop=\"s\">\n              <Box className='phone-number'>\n                <Text>{phone.profile.phoneNumber}</Text>\n              </Box>\n              {phone.status === 'UNVERIFIED' && (\n                <Box marginLeft=\"s\">\n                  <AddAttributeButton \n                    heading=\"Verify Phone Number\"\n                    initInputLabel=\"Verification Code\"\n                    autoStartTransaction\n                    onStartTransaction={startPhoneVerificationTransaction.bind(null, phone)} \n                    onFinishTransaction={finishPhoneTransaction}\n                  >\n                    Verify\n                  </AddAttributeButton>\n                </Box>\n              )}\n              <Box marginLeft=\"s\">\n                <RemoveButton \n                  selectorHint=\"removePhoneNumber\"\n                  heading=\"Are you sure you want to remove this phone number?\" \n                  description={phone.profile.phoneNumber}\n                  onStartTransaction={handleRemovePhone.bind(null, phone.id)}\n                  onFinishTransaction={finishPhoneTransaction}\n                >\n                  Remove\n                </RemoveButton>\n              </Box>\n            </Box>\n          )) : (\n            <Spinner />\n          )}\n          <Box paddingTop=\"s\" paddingBottom=\"s\">\n            <AddAttributeButton \n              heading=\"Add Phone Number\"\n              initInputLabel=\"Phone Number\"\n              selectorHint=\"addPhoneNumber\"\n              onStartTransaction={startAddPhoneTransaction} \n              onFinishTransaction={finishPhoneTransaction}\n            >\n              Add phone number\n            </AddAttributeButton>\n          </Box>\n        </Box>\n      </Box>\n      <Box className=\"pure-u-1 pure-u-sm-1-2\" marginTop=\"s\">\n        <InfoBox \n          id=\"identifiers-tip\"\n          heading=\"Tip\" \n          icon=\"information-circle-filled\" \n          renderInfo={() => (\n            <Text as=\"p\">User identifiers are separated because changes require verification.</Text>\n          )} \n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default IdentifiersSection;\n","import { Box } from '@okta/odyssey-react';\nimport ProfileSection from './ProfileSection';\nimport IdentifiersSection from './IdentifiersSection';\n\nconst Profile = () => {\n  return (\n    <Box id=\"profile-table\" padding=\"s\" borderColor=\"display\" borderRadius=\"base\">\n      <ProfileSection />\n      <Box borderColor=\"display\" />\n      <IdentifiersSection />\n    </Box>\n  );\n};\n\nexport default Profile;\n","import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Box, Heading, Text, List, Button, Infobox } from '@okta/odyssey-react';\nimport TopNav from '../TopNav';\nimport Profile from '../Profile';\nimport InfoBox from '../InfoBox';\n\nimport classes from './HomePage.module.css';\n\nexport default function Home() {\n  const history = useHistory();\n  const { oktaAuth, authState } = useOktaAuth();\n  const [userInfo, setUserInfo] = useState(null);\n\n  useEffect(() => {\n    if (!authState?.isAuthenticated) {\n      setUserInfo(null);\n    } else {\n      oktaAuth.getUser().then((info) => {\n        setUserInfo(info);\n      }).catch((err) => {\n        console.error(err);\n      });\n    }\n  }, [authState, oktaAuth]);\n\n  const startIdxFlow = flowMethod => async () => {\n    history.replace(`/flow/${flowMethod}`);\n  };\n\n  return (\n    <>\n      <TopNav />\n      <Box className={classes.homePageContainer} margin=\"l\" display=\"flex\" flexDirection=\"column\">\n        <Heading level=\"1\">Welcome {userInfo && userInfo.name}</Heading>\n        { authState?.isAuthenticated && <Infobox id=\"sign-in-info-box\" heading=\"You're signed in\" variant=\"success\" /> }\n        <Box display=\"flex\" className=\"pure-g\">\n          <Box paddingRight=\"s\" className=\"pure-u-1 pure-u-md-1-2\">\n            <InfoBox \n              heading=\"OAuth\" \n              icon=\"settings\" \n              renderInfo={() => (\n                <>\n                {!authState?.isAuthenticated && <Text className={classes.noToken}>No tokens yet</Text>}\n                {authState?.idToken && <Text as=\"p\">Id Token: {authState.idToken.idToken}</Text>}\n                {authState?.accessToken && <Text as=\"p\">Access Token: {authState.accessToken.accessToken}</Text>}\n                {authState?.refreshToken && <Text as=\"p\">Refresh Token: {authState.refreshToken.refreshToken}</Text>}\n                </>\n              )}/>\n            <Box margin=\"s\">\n              <Text as=\"p\">Congrats on starting this sample application! This sample will demostrate how to build views that facilitate some common authentication flows:</Text>\n              <List>\n                <List.Item>Sign In</List.Item>\n                <List.Item>Sign Up</List.Item>\n                <List.Item>Password Recovery</List.Item>\n                <List.Item>Logout</List.Item>\n              </List>\n              <Text as=\"p\">To learn more about enabling advanced authentication use cases in this application, check out our guide.</Text>\n            </Box>\n            { !authState?.isAuthenticated && (\n              <Box marginTop=\"s\">\n                <Text>Give it a try:</Text>\n                <Box display=\"flex\" margin=\"s\">\n                  <Button name=\"signin\" variant=\"primary\" onClick={startIdxFlow('authenticate')}>Sign In</Button>\n                  <Button name=\"signup\" variant=\"secondary\" onClick={startIdxFlow('register')}>Sign Up</Button>\n                </Box>\n              </Box>\n            )}\n          </Box>\n          { authState?.isAuthenticated && <Box paddingLeft=\"s\" className=\"pure-u-1 pure-u-md-1-2\"><Profile /></Box> }\n        </Box>\n      </Box>\n    </>\n  );\n}\n","import { useTransaction } from '../TransactionContext';\n\nexport default function ErroPage() {\n  const { \n    transaction: { error } \n  } = useTransaction();\n\n  return (<div>{error.message || JSON.stringify(error, null, 4)}</div>);\n}\n","import { Heading, Button } from '@okta/odyssey-react';\nimport { useHistory } from 'react-router-dom';\nimport { useTransaction } from '../TransactionContext';\n\nexport default function CanceledPage() {\n  const history = useHistory();\n  const { setTransaction } = useTransaction();\n\n  const handleRestart = () => {\n    setTransaction(null);\n    history.replace('/');\n  };\n\n  return (\n    <>\n      <Heading level=\"1\">Transaction has been canceled!</Heading>\n      <Button onClick={handleRestart}>Restart</Button>\n    </>\n  );\n}\n","import { useTransaction } from '../TransactionContext';\n\nexport default function TerminalPage() {\n  const { transaction } = useTransaction();\n  const messages = transaction ? transaction.messages : 'Transaction could not be loaded';\n  return (\n    <>\n      <div>{JSON.stringify(messages, null, 4)}</div>\n      <a href=\"/\">Back to Signin</a>\n    </>\n  );\n}\n","const compose = (...functions) => args => functions.reduceRight((arg, fn) => fn(arg), args);\n\nconst inputTransformer = nextStep => form => {\n  // only process UI inputs\n  const inputs = nextStep.inputs?.filter(input => !!input.label);\n  \n  if (!inputs?.length) {\n    return form;\n  }\n\n  return { \n    ...form,\n    inputs: inputs.map(({ label, name, type, secret, required }) => {\n      if (secret) {\n        type = 'password';\n      } else if (type === 'string') {\n        type = 'text';\n      } else if (type === 'boolean') {\n        type = 'checkbox';\n      }\n      return { label, name, type, required };\n    })\n  };\n};\n\nconst selectTransformer = nextStep => form => {\n  const { inputs, options } = nextStep;\n  \n  if (!options) {\n    return form;\n  }\n\n  return {\n    ...form,\n    select: {\n      name: inputs[0].name,\n      options: options.map(({ label, value }) => ({ key: value, value, label }))\n    }\n  };\n};\n\nconst securityQuestionTransformer = nextStep => form => {\n  const { \n    authenticator: { \n      contextualData: { questionKeys, questions, enrolledQuestion } = {}\n    } = {} \n  } = nextStep;\n\n  if (enrolledQuestion) {\n    // verification form\n    return {\n      ...form,\n      text: { value: enrolledQuestion.question }\n    };\n  } else if (questions && questionKeys) {\n    // enrollment form\n    return {\n      ...form,\n      select: {\n        label: 'Choose a security question',\n        name: 'questionKey',\n        options: questions.map(({ questionKey, question }) => ({ \n          key: questionKey,\n          label: question,\n          value: question\n        }))\n      }\n    };\n  } else {\n    return form;\n  }\n};\n\nconst googleAuthenticatorTransformer = nextStep => form => {\n  const { \n    authenticator: { \n      contextualData: { qrcode, sharedSecret } = {}\n    } = {} \n  } = nextStep;\n  \n  if (!qrcode && !sharedSecret) {\n    return form;\n  }\n\n  return {\n    ...form,\n    text: { value: sharedSecret },\n    image: { src: qrcode.href }\n  };\n};\n\nexport const formTransformer = nextStep => compose(\n  googleAuthenticatorTransformer(nextStep),\n  securityQuestionTransformer(nextStep),\n  selectTransformer(nextStep),\n  inputTransformer(nextStep)\n);\n","import { useState } from 'react';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { \n  Form, \n  Heading,\n  Button, \n  TextInput, \n  Checkbox, \n  Select, \n  Infobox,\n  Link,\n  Box,\n} from '@okta/odyssey-react';\nimport { useTransaction } from '../TransactionContext';\nimport { formTransformer } from '../formTransformer';\nimport { capitalizeFirstLetter, getMessageVariant } from '../util';\nimport Spinner from './Spinner';\n\nconst GeneralForm = () => {\n  const { oktaAuth } = useOktaAuth();\n  const { transaction, setTransaction } = useTransaction();\n  const [inputValues, setInputValues] = useState({});\n  const [processing, setProcessing] = useState(false);\n\n  const handleChange = ({ target: { name, value, checked } }) => {\n    return setInputValues({\n      ...inputValues,\n      [name]: value || checked\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    setProcessing(true);\n    const newTransaction = await oktaAuth.idx.proceed(inputValues);\n    setTransaction(newTransaction);\n    setInputValues({});\n    setProcessing(false);\n  };\n\n  const handleSkip = async () => {\n    const newTransaction = await oktaAuth.idx.proceed({ skip: true });\n    setTransaction(newTransaction);\n  };\n\n  const handleRecoverPassword = async (e) => {\n    e.preventDefault();\n    setProcessing(true);\n    const newTransaction = await oktaAuth.idx.recoverPassword();\n    setTransaction(newTransaction);\n    setProcessing(false);\n  };\n\n  if (!transaction || !transaction.nextStep) {\n    return <Spinner />;\n  }\n\n  const { nextStep, messages, actions, availableSteps } = transaction;\n  const { name, canSkip } = nextStep;\n  const canRecoverPassword = !!actions?.['currentAuthenticator-recover'];\n  const idps = availableSteps.filter(step => step.name === 'redirect-idp');\n  const form = formTransformer(nextStep)({} /* initial form value */);\n  const { inputs, select, text, image } = form;\n\n  return (\n    <Box padding=\"m\">\n      <Form onSubmit={handleSubmit}>\n        <Heading id=\"page-title-header\" level=\"1\" visualLevel=\"4\">\n          {name.split('-').map(str => capitalizeFirstLetter(str)).join(' ')}\n        </Heading>\n        <Form.Error>\n          <Box id=\"form-messages\">\n          {messages && messages.map(message => \n            <Infobox \n              key={message.message} \n              variant={getMessageVariant(message.class)}\n              content={message.message} \n            />)}\n          </Box>\n        </Form.Error>\n        <Form.Main>\n          {text && <div>{text.value}</div>}\n          {image && <img src={image.src} />}\n          {select && (\n            <Select label={select.label} name={select.name} onChange={handleChange}>\n              <Select.Option key=\"\" value=\"\">---</Select.Option>\n              {select.options.map(({ key, label }) => (\n                <Select.Option key={key} value={key}>{label}</Select.Option>\n              ))}\n            </Select>\n          )}\n          {inputs && inputs.map((input) => {\n            const { label, name, type, required } = input;\n            const Comp = type === 'checkbox' ? Checkbox : TextInput;\n            return (\n              <Comp \n                key={name}\n                name={name}\n                label={label}\n                type={type} \n                value={inputValues[name] || ''} \n                required={required} \n                onChange={handleChange} \n              />\n            );\n          })}\n        </Form.Main>\n        <Box display=\"flex\" flexDirection=\"column\">\n          {canSkip && <Button variant=\"secondary\" type=\"button\" onClick={handleSkip}>Skip</Button>}\n          <Box paddingTop=\"s\" paddingBottom=\"s\">\n            <Button wide type=\"submit\" disabled={processing}>Submit</Button>\n          </Box>\n          {canRecoverPassword && (\n            <Box paddingTop=\"s\" paddingBottom=\"s\">\n              <Link href=\"#\" name=\"forgotPassword\" onClick={handleRecoverPassword}>Forgot password</Link>\n            </Box>\n          )}\n          {idps.length > 0 && (\n            <Box>\n              <Box borderColor=\"display\" marginTop=\"s\" marginBottom=\"s\"></Box>\n              {idps.map(step => (\n                <Box key={step.idp.id} paddingTop=\"s\">\n                  <Link variant=\"dismiss\" href={step.href}>{step.idp.name}</Link>\n                </Box>\n              ))}\n            </Box>\n          )}\n        </Box>\n      </Form>\n    </Box>\n  );\n};\n\nexport default GeneralForm;\n","import { Link, Box } from '@okta/odyssey-react';\nimport { useTransaction } from '../TransactionContext';\n\nconst IdpForm = () => {\n  const { transaction: { availableSteps } } = useTransaction();\n  const idpMeta = availableSteps?.find(step => step.name === 'redirect-idp');\n\n  return (\n    <Box>\n      <Box>Type: {idpMeta.type}</Box>\n      <Link href={idpMeta.href}>Login With Google</Link>\n    </Box>\n  );\n};\n\nexport default IdpForm;\n","import { useCallback, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { Box, Link } from '@okta/odyssey-react';\nimport { useTransaction } from '../../TransactionContext';\nimport GeneralForm from '../GeneralForm';\nimport IdpForm from '../IdpForm';\n\nimport classes from './FlowPage.module.css';\n\nconst FlowPage = () => {\n  const { flow } = useParams();\n  const history = useHistory();\n  const { oktaAuth } = useOktaAuth();\n  const { transaction, setTransaction } = useTransaction();\n\n  const startFlow = useCallback(async () => {\n    const newTransaction = flow === 'idp' \n      ? await oktaAuth.idx.startTransaction() \n      : await oktaAuth.idx[flow]();\n    setTransaction(newTransaction);\n  }, [oktaAuth, flow, setTransaction]);\n\n  useEffect(() => {\n    // start a new flow based on path param, `/flow/${flowMethod}`\n    if (flow && !transaction) { \n      startFlow();\n    }\n  }, [flow, transaction, startFlow]);\n\n  const backToHomePage = async () => {\n    await oktaAuth.idx.cancel();\n    setTransaction(null);\n    history.replace('/');\n  };\n\n  const getFormComponent = () => {\n    if (flow === 'idp') {\n      return IdpForm;\n    }\n    return GeneralForm;\n  };\n\n  const FormComponent = getFormComponent();\n  return (\n    <Box \n      className={classes.container} \n      display=\"flex\" \n      flexDirection=\"column\"\n      justifyContent=\"flex-start\" \n      backgroundColor=\"disabled\"\n    >\n      <Box className={classes.nav} display=\"flex\" alignItems=\"center\">\n        <Box padding=\"m\">\n          <Link onClick={backToHomePage}>Home</Link>\n        </Box>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Box className={classes.formContainer} backgroundColor=\"default\">\n          <FormComponent />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FlowPage;\n","import { useEffect } from 'react'; \nimport { useHistory } from 'react-router-dom';\nimport { useOktaAuth } from '@okta/okta-react';\nimport { hasErrorInUrl, IdxStatus } from '@okta/okta-auth-js';\nimport { useTransaction } from '../TransactionContext';\n\nconst LoginCallback = () => {\n  const history = useHistory();\n  const { setTransaction } = useTransaction();\n  const { oktaAuth } = useOktaAuth();\n\n  useEffect(() => {\n    const parseFromUrl = async () => {\n      try {\n        await oktaAuth.idx.handleInteractionCodeRedirect(window.location.href);\n        history.push('/');\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (hasErrorInUrl(window.location.search)) {\n      const url = new URL(window.location.href);\n      const error = new Error(`${url.searchParams.get('error')}: ${url.searchParams.get('error_description')}`);\n      setTransaction({\n        status: IdxStatus.FAILURE,\n        error\n      });\n      return;\n    } else if(oktaAuth.isLoginRedirect()) {\n      return parseFromUrl();\n    }\n    \n    const handleEmailVerifyCallback = async () => {\n      try {\n        const newTransaction = await oktaAuth.idx.handleEmailVerifyCallback(window.location.search);\n        setTransaction(newTransaction);\n      } catch (error) {\n        setTransaction({\n          status: IdxStatus.FAILURE,\n          error\n        });\n      } finally {\n        history.push('/');\n      }\n    };\n\n    if (oktaAuth.idx.isEmailVerifyCallback(window.location.search)) {\n      return handleEmailVerifyCallback();\n    }\n  }, [oktaAuth, history, setTransaction]);\n  \n  return null;\n};\n\nexport default LoginCallback;\n","const CLIENT_ID = process.env.SPA_CLIENT_ID || process.env.CLIENT_ID || '{clientId}';\nconst ISSUER = process.env.ISSUER || 'https://{yourOktaDomain}.com/oauth2/default';\nconst REDIRECT_URI = `${window.location.origin}/login/callback`;\n\nexport default {\n  clientId: CLIENT_ID,\n  issuer: ISSUER,\n  redirectUri: REDIRECT_URI,\n  scopes: [\n    'openid', \n    'profile', \n    'email', \n    'offline_access', \n    'okta.myAccount.read', \n    'okta.myAccount.manage',\n    'okta.myAccount.email.manage',\n    'okta.myAccount.phone.manage'\n  ],\n  pkce: true\n};\n","import { useState, useEffect } from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch, \n  Route,\n  useHistory\n} from 'react-router-dom';\nimport { \n  OktaAuth, \n  IdxStatus, \n  urlParamsToObject, \n  isRedirectUri \n} from '@okta/okta-auth-js';\nimport { Security } from '@okta/okta-react';\nimport HomePage from './components/HomePage';\nimport ErrorPage from './components/ErrorPage';\nimport CanceledPage from './components/CanceledPage';\nimport TerminalPage from './components/TerminalPage';\nimport FlowPage from './components/FlowPage';\nimport LoginCallback from './components/LoginCallback';\nimport Spinner from './components/Spinner';\nimport { Transaction } from './TransactionContext';\nimport oidcConfig from './config';\n\nconst oktaAuth = (() => {\n  const { \n    state, \n    recoveryToken, \n    issuer,\n    clientId\n   } = urlParamsToObject(window.location.search);\n  return new OktaAuth(Object.assign({}, oidcConfig, {\n    state,\n    recoveryToken,\n    ...(issuer && { issuer }),\n    ...(clientId && { clientId })\n  }));\n})();\n\nconst restoreOriginalUri = () => {};\n\nfunction App() {\n  const history = useHistory();\n  const [transaction, setTransaction] = useState(null);\n  const [myAccountTransaction, setMyAccountTransaction] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const { tokens, status, meta } = transaction || {};\n    if (status === IdxStatus.SUCCESS) {\n      oktaAuth.tokenManager.setTokens(tokens);\n      history.replace('/');\n      setTransaction(null);\n    } else if (status === IdxStatus.TERMINAL) {\n      history.replace('/terminal');\n      setTransaction(null);\n    } else if (status === IdxStatus.FAILURE) {\n      history.replace('/error');\n      setTransaction(null);\n    } else if (status === IdxStatus.CANCELED) {\n      history.replace('/canceled');\n      setTransaction(null);\n    } else if (status === IdxStatus.PENDING) {\n      history.replace(`/flow/${meta.flow}`);\n    }\n  }, [transaction, history]);\n\n  useEffect(() => {\n    const resumeTransaction = async () => {\n      setLoading(true);\n      const newTransaction = await oktaAuth.idx.proceed();\n      setTransaction(newTransaction);\n      setLoading(false);\n    };\n\n    if (!isRedirectUri(window.location.href, oktaAuth) && oktaAuth.idx.canProceed()) {\n      resumeTransaction();\n    }\n  }, []);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return (\n    <Security \n      oktaAuth={oktaAuth} \n      onAuthRequired={() => history.replace('/')}\n      restoreOriginalUri={restoreOriginalUri}\n    >\n      <Transaction.Provider value={{\n        transaction,\n        setTransaction,\n        myAccountTransaction,\n        setMyAccountTransaction\n      }}>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/login/callback\" component={LoginCallback} />\n          <Route path=\"/error\" component={ErrorPage} />\n          <Route path=\"/terminal\" component={TerminalPage} />\n          <Route path=\"/canceled\" component={CanceledPage} />\n          <Route path=\"/flow/:flow\" component={FlowPage} />\n        </Switch>\n      </Transaction.Provider>\n    </Security>\n  );\n}\n\nexport default function AppWithRouter() {\n  return <Router><App /></Router>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './main.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"names":["TopNav","oktaAuth","authState","useOktaAuth","handleLogoutOut","signOut","classes","container","isAuthenticated","InfoBox","heading","icon","renderInfo","rest","infoContainer","Spinner","ProfileSection","profile","setProfile","useState","inputs","setInputs","label","name","type","value","editing","setEditing","updated","setUpdated","error","setError","then","catch","err","handleEditNames","newInputs","map","input","handleCancelEditNames","handleUpdateProfiles","updatedProfile","reduce","acc","curr","castedNumber","Number","isNaN","newProfile","updateProfile","log","handleChange","target","errorCauses","cause","errorSummary","LinkButton","props","AddAttributeButton","initInputLabel","selectorHint","autoStartTransaction","onStartTransaction","onFinishTransaction","children","myAccountTransaction","setMyAccountTransaction","useTransaction","inputLabel","setInputLabel","inputName","setInputName","headingText","setHeadingText","open","setOpen","setValue","handleFinishTransaction","useCallback","status","handleButtonClick","transaction","e","v","handleCancel","preventDefault","handleResend","challenge","data","method","handleSubmit","verificationCode","verify","RemoveButton","description","handleClose","handleConfirm","IdentifiersSection","emails","setEmails","phones","setPhones","getEmails","email","roles","includes","selectorId","split","str","toLowerCase","join","capitalizeFirstLetter","getPhones","finishEmailTransaction","finishPhoneTransaction","startUpdateEmailTransaction","emailObj","addEmail","sendEmail","role","startAddSecondaryEmailTransaction","handleRemoveEmail","emailId","deleteEmail","startAddPhoneTransaction","phone","addPhone","handleRemovePhone","phoneId","deletePhone","startEmailVerificationTransaction","startPhoneVerificationTransaction","bind","id","some","phoneNumber","Profile","history","useHistory","userInfo","setUserInfo","getUser","info","startIdxFlow","flowMethod","replace","homePageContainer","noToken","idToken","accessToken","refreshToken","message","JSON","stringify","setTransaction","messages","GeneralForm","inputValues","setInputValues","processing","setProcessing","checked","newTransaction","idx","proceed","handleSkip","skip","handleRecoverPassword","recoverPassword","nextStep","actions","availableSteps","canSkip","canRecoverPassword","idps","filter","step","form","formTransformer","select","text","image","getMessageVariant","class","src","options","key","required","Checkbox","TextInput","length","href","idp","IdpForm","idpMeta","find","FlowPage","flow","useParams","startFlow","startTransaction","backToHomePage","cancel","FormComponent","getFormComponent","nav","formContainer","LoginCallback","parseFromUrl","handleInteractionCodeRedirect","window","location","push","hasErrorInUrl","search","url","URL","Error","searchParams","get","IdxStatus","FAILURE","isLoginRedirect","handleEmailVerifyCallback","isEmailVerifyCallback","state","recoveryToken","issuer","clientId","urlParamsToObject","OktaAuth","Object","assign","oidcConfig","restoreOriginalUri","loading","setLoading","tokens","meta","SUCCESS","tokenManager","setTokens","TERMINAL","CANCELED","PENDING","resumeTransaction","isRedirectUri","canProceed","HomePage","ErrorPage","TerminalPage","CanceledPage","Router","ReactDOM","render","App","document","getElementById"],"mappings":"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"}